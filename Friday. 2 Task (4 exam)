import ReactDOM from 'react-dom/client';
import { applyMiddleware, combineReducers, legacy_createStore as createStore } from 'redux'
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import React, { FC, useEffect } from 'react'
import axios from 'axios'

// Styles
const table: React.CSSProperties = {
  borderCollapse: 'collapse',
  width: '100%',
  tableLayout: 'fixed',
}

const th: React.CSSProperties = {
  padding: '10px',
  border: '1px solid black',
  background: 'lightgray',
  cursor: 'pointer'
}

const td: React.CSSProperties = {
  padding: '10px',
  border: '1px solid black'
}

const thActive: React.CSSProperties = {
  padding: '10px',
  border: '1px solid black',
  background: 'lightblue',
  cursor: 'pointer'
}

// Types
type UserType = {
  id: string;
  name: string;
  age: number;
}

type UsersResponseType = {
  items: UserType[]
  totalCount: number
}

type ParamsType = {
  sortBy: string | null
  sortDirection: 'asc' | 'desc' | null
}

// API
const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})

const api = {
  getUsers(params?: ParamsType) {
    return instance.get<UsersResponseType>('users', {params})
  },
}

// Reducer
const initState = {
  users: [] as UserType[],
  activeColumn: null as string | null,
  params: {
    sortBy: 'name',
    sortDirection: 'asc'
  } as ParamsType
}
type InitStateType = typeof initState

const appReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
  switch (action.type) {
    case 'SET_USERS':
      return {...state, users: action.users}
    case 'SET_PARAMS':
      return {...state, params: {...state.params, ...action.payload}}
    case 'SET_ACTIVE_COLUMN':
      return {...state, activeColumn: action.value}
    default:
      return state
  }
}

// Store
const rootReducer = combineReducers({app: appReducer})

const store = createStore(rootReducer, applyMiddleware(thunk))
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector

const setUsersAC = (users: UserType[]) => ({type: 'SET_USERS', users} as const)
const setParamsAC = (payload: ParamsType) => ({type: 'SET_PARAMS', payload} as const)
const setActiveColumnAC = (value: string) => ({type: 'SET_ACTIVE_COLUMN', value} as const)
type ActionsType =
  | ReturnType<typeof setUsersAC>
  | ReturnType<typeof setParamsAC>
  | ReturnType<typeof setActiveColumnAC>

// Thunk
const getUsersTC = (): AppThunk => (dispatch, getState) => {
  const params = getState().app.params
  api.getUsers(params)
    .then(res => dispatch(setUsersAC(res.data.items)))
}


export const Users = () => {
  const users = useAppSelector(state => state.app.users)
  const sortBy = useAppSelector(state => state.app.params.sortBy)
  const sortDirection = useAppSelector(state => state.app.params.sortDirection)

  const dispatch = useAppDispatch()

  useEffect(() => {
    dispatch(getUsersTC())
  }, [sortBy, sortDirection])

  const sortHandler = (sortBy: string) => {
    const direction = sortDirection === 'asc' ? 'desc' : 'asc'
    dispatch(setParamsAC({sortBy, sortDirection: direction}))
    dispatch(setActiveColumnAC(sortBy))
  };

  return (
    <div>
      <h1>üë™ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</h1>
      <table style={table}>
        <thead>
        <tr>
          <Th name={'name'} sortHandler={sortHandler}/>
          <Th name={'age'} sortHandler={sortHandler}/>
        </tr>
        </thead>
        <tbody>
        {
          users.map(u => {
            return (
              <tr key={u.id}>
                <td style={td}>{u.name}</td>
                <td style={td}>{u.age}</td>
              </tr>
            )
          })
        }
        </tbody>
      </table>
    </div>
  )
}

type ThPropsType = {
  name: string
  sortHandler: (name: string) => void
}

const Th: FC<ThPropsType> = ({name, sortHandler}) => {
  const activeColumn = useAppSelector(state => state.app.activeColumn)
  const sortBy = useAppSelector(state => state.app.params.sortBy)
  const sortDirection = useAppSelector(state => state.app.params.sortDirection)

  const condition1 = '‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó'
  const condition2 = '‚ùó‚ùó‚ùó YYY ‚ùó‚ùó‚ùó'
  const condition3 = '‚ùó‚ùó‚ùó ZZZ ‚ùó‚ùó‚ùó'

  return (
    <th
      style={condition1 ? thActive : th}
      onClick={() => sortHandler(name)}
    >
      {name}
      {
        condition1 && condition2 && (condition3 ? <span> ‚¨Ü</span> : <span> ‚¨á</span>)
      }
    </th>
  )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(
  <Provider store={store}>
    <Users/>
  </Provider>
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ —Ç–∞–±–ª–∏—Ü–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.
// –ü–æ–∫–ª–∏–∫–∞–π—Ç–µ –ø–æ –≤–∫–ª–∞–¥–∫–∞–º age –∏ name –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–µ—Ä–Ω–æ,
// –Ω–æ –≤ —à–∞–ø–∫–µ –∫—Ä–∏–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Å—Ç—Ä–µ–ª–∫–∏ –∏ –Ω–µ –≤–∏–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –≤–º–µ—Å—Ç–æ XXX YYY –∏ ZZZ, —á—Ç–æ–±—ã:
// 1) –°—Ç—Ä–µ–ª–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ
// 2) –®–∞–ø–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏ –±—ã–ª–∞ –≥–æ–ª—É–±–∞—è, –∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Ä–∞—è
// ‚ùó –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª 

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: a === '1' b !== a c === state

Correct answer
const condition1 = activeColumn
const condition2 = sortBy === name
const condition3 = sortDirection === 'asc'

