import React from 'react'
import ReactDOM from 'react-dom/client';
import { combineReducers, legacy_createStore as createStore } from 'redux'
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import axios from 'axios';
import thunk, { ThunkAction, ThunkDispatch } from 'redux-thunk';

// Types
type PhotoType = {
    id: string
    albumId: string
    title: string
    url: string
}

// Api
const instance = axios.create({baseURL: 'https://exams-frontend.kimitsu.it-incubator.ru/api/'})

const photosAPI = {
    getPhotos() {
        return instance.get<PhotoType[]>('photos')
    },
}


// Reducer
const initState = [] as PhotoType[]

type InitStateType = typeof initState

const photoReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case 'PHOTO/GET-PHOTOS':
            return action.photos
        default:
            return state
    }
}

const getPhotosAC = (photos: PhotoType[]) => ({type: 'PHOTO/GET-PHOTOS', photos} as const)
type ActionsType = ReturnType<typeof getPhotosAC>

const getPhotosTC = (): AppThunk => (dispatch) => {
    debugger
    console.log('asdg')
    photosAPI.getPhotos()
        .then((res) => {
            dispatch(getPhotosAC(res.data))
        })
}

// Store
const rootReducer = combineReducers({
    photo: photoReducer,
})

const store = createStore(rootReducer)
type RootState = ReturnType<typeof store.getState>
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>
const useAppDispatch = () => useDispatch<AppDispatch>()
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector


// Components
const App = () => {
    const dispatch = useAppDispatch()
    const photos = useAppSelector(state => state.photo)

    const getPhotosHandler = () => {

        dispatch(getPhotosTC())
    };

    return (
        <>
            <h1>üì∏ –§–æ—Ç–æ</h1>
            <button onClick={getPhotosHandler}>–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏</button>
            <div style={{display: 'flex', gap: '20px', margin: '20px'}}>{
                photos.map(p => {
                    return <div key={p.id}>
                        <b>title</b>: {p.title}
                        <div><img src={p.url} alt=""/></div>
                    </div>
                })
            }</div>
        </>
    )
}


const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<Provider store={store}> <App/></Provider>)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏" –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π,
// –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç—Å—è.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState


Solution

const store = createStore(rootReducer, applyMiddleware(thunk))

