/**
* Написать функцию sostavChisla(massivChisel: number[], chislo: number), 
  которая бы находила все возможные комбинации чисел из massivChisel, 
  сумма которых равна chislo. При этом:
  1) massivChisel содержит, только уникальные положительные числа (> 0)
  2) в комбинации не должно быть повторений чисел
  3) все комбинации должны быть уникальными
  
  Для проверки работоспособности функции запустить runTests()
  
  @param massivChisel: number[]
  @param chislo: number[]
  @return Array<Array<number>>
*/
function sostavChisla(massivChisel, chislo) {

//решение
    const sortedMassive = JSON.parse(JSON.stringify(massivChisel)).sort()
  const arr1 = [] // создадим пустой массив
  const output = []
  
    for (let i = 0; i < sortedMassive.length; i++) { // перебираем значения от нуля до значения, которое меньше
      //длины отсортированного массива
      
      arr1.push(sortedMassive[i]) // добавим в пустой массив, в конец значение из перебора цикла for
   
      const summ = arr1.reduce((a,b)=> a+b) // суммируем все элементы массива arr1
      
      if (summ === chislo ) {
        
        output.push([...arr1])
        
      } // если сумма элементов равна arr1, 
      //то возвращаем пустой массив, добавляя в конец
     
      if (summ > chislo) {
        arr1.pop()
        
        i = sortedMassive.indexOf(arr1[arr1.length - 1]); // найти в отсортированном 
        //массиве последний элемент массива arr1
        
        arr1.pop()
        
        
      } // если сумма элементов больше, чем число, то сначала
      //удяляем последний элемент массива arr1
      //
      
    } 
	// код писать только внутри данной функции
	return output;
}
// console.log(sostavChisla([8, 2, 3, 4, 6, 7, 1], 99));

function compareNumericArrays(arr1, arr2) {
  if(arr1.length !== arr2.length) {
    return false;
  }
  
  arr1 = [...arr1].sort();
  arr2 = [...arr2].sort();
  
  for(let i=0; i<arr1.length; i++) {
    if(arr1[i] !== arr2[i]) {
      return false;
    }
  }
  
  return true;
}

function compareArraysOfNumericArrays(arr1, arr2) {
  if(arr1.length !== arr2.length) {
    return false;
  }
  
  for(let el1 of arr1) {
    if(arr2.findIndex(el2 => compareNumericArrays(el1, el2)) < 0) {
      return false;
    }
  }
  
  return true;
}

runTests();

function runTests() {
    const tests = [
    {
      chislo: 5, 
      massivChisel: [8, 2, 3, 4, 6, 7, 1],
      result: [[2, 3], [4, 1]]
    },
    {
      chislo: 99, 
      massivChisel: [8, 2, 3, 4, 6, 7, 1],
      result: []
    },
    {
      chislo: 8, 
      massivChisel: [1, 2, 3, 4, 5, 6, 7, 8],
      result: [[1, 3, 4], [1, 2, 5], [3, 5], [2, 6], [1, 7], [8]]
    },
    {
      chislo: 8, 
      massivChisel: [7, 8, 3, 4, 5, 6, 1, 2],
      result: [[1, 3, 4], [1, 2, 5], [3, 5], [2, 6], [1, 7], [8]]
    },
    {
      chislo: 15, 
      massivChisel: [7, 8, 3, 4, 5, 6, 1, 2],
      result: [[1, 2, 3, 4, 5], [2, 3, 4, 6], [1, 3, 5, 6], [4, 5, 6], [1, 3, 4, 7], [1, 2, 5, 7], [3, 5, 7], [2, 6, 7], [1, 2, 4, 8], [3, 4, 8], [2, 5, 8], [1, 6, 8], [7, 8]]
    },  
    
  ];

  let errors = 0;
  for(const test of tests) {
    let result;
    try{
      result = sostavChisla(test.massivChisel, test.chislo);
      
      if(!compareArraysOfNumericArrays(
          result, 
          test.result)
      ) {
        errors++;
        console.log('--------------------------------------------')
        console.log("failed for test", test, "Got result", result);
      }
    } catch(e) {
      errors++;
      console.log("failed for", test, 'exception', e.message);
    }    
  }

  if(errors === 0) {
    console.log('checkStringForBracects test successfuly completed');
  } else {
    console.log(`checkStringForBracects test failed with ${errors} errors`);
  }
}


// Alternative solution

function sostavChisla(massivChisel, chislo) {
  
  return [...Array(2**massivChisel.length)].map((x,i)=>massivChisel.
                                     filter((x,j)=>i&1<<j).
                                     sort()).filter((x,i)=>eval(x.join`+`)==chislo);
}

